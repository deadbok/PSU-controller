%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Sat Mar  2 14:26:08 2013
%%Title: /home/oblivion/Documents/Electronics/MPLABXProjects/PSU controller.X/docs/voltage_sense.sch
%%Author: (null)
%%BoundingBox: 0 0 1224 792
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
43200 47200 43200 47050 10 line
43200 46300 43200 46450 10 line
43100 46450 43300 46450 10 line
43300 46450 43300 47050 10 line
43300 47050 43100 47050 10 line
43100 47050 43100 46450 10 line
grestore
gsave
false false false false 260.000000 [(R1) ] 90 43000 46500 180.555557 text
grestore
gsave
false false false false 260.000000 [(5.6k) ] 0 43300 46300 180.555557 text
grestore
gsave
43200 44600 43200 44450 10 line
43200 43700 43200 43850 10 line
43100 43850 43300 43850 10 line
43300 43850 43300 44450 10 line
43300 44450 43100 44450 10 line
43100 44450 43100 43850 10 line
grestore
gsave
false false false false 260.000000 [(R2) ] 90 43000 43900 180.555557 text
grestore
gsave
false false false false 260.000000 [(100) ] 0 43300 43700 180.555557 text
grestore
gsave
43200 45000 43200 45200 10 line
43200 45700 43200 45900 10 line
42900 45500 42700 45500 10 line
43100 45200 43300 45200 10 line
43300 45200 43300 45700 10 line
43300 45700 43100 45700 10 line
43100 45700 43100 45200 10 line
42900 45500 43100 45500 10 line
43100 45500 43000 45450 10 line
43100 45500 43000 45550 10 line
grestore
gsave
false false false false 260.000000 [(R3) ] 90 42900 45550 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 43300 45000 180.555557 text
grestore
gsave
43200 43300 43200 43500 10 line
43100 43300 43300 43300 10 line
43155 43250 43245 43250 10 line
43180 43210 43220 43210 10 line
grestore
gsave
43200 47840 43200 47500 10 line
43200 47940 100 0 360 10 darc
grestore
gsave
false true false false 260.000000 [(T1) ] 270 43150 48150 180.555557 text
grestore
43200 47500 43200 47200 10 line
43200 46300 43200 45900 10 line
43200 45000 43200 44600 10 line
42700 45500 42600 45500 10 line
42600 45500 42600 44900 10 line
42600 44900 43200 44900 10 line
gsave
false false false false 260.000000 [(To PIC16F887 pin RA3) ] 0 43700 45700 180.555557 text
grestore
gsave
false false false false 260.000000 [(Voltage sense) ] 0 50100 40700 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 50600 40100 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 51900 40100 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 54000 40400 180.555557 text
grestore
gsave
false false false false 260.000000 [(deadbok) ] 0 53900 40100 180.555557 text
grestore
gsave
44240 46000 43900 46000 10 line
44340 46000 100 0 360 10 darc
grestore
gsave
false false false true 260.000000 [(T2) ] 0 44550 46050 180.555557 text
grestore
43900 46000 43200 46000 10 line
gsave
46800 47200 46800 47050 10 line
46800 46300 46800 46450 10 line
46700 46450 46900 46450 10 line
46900 46450 46900 47050 10 line
46900 47050 46700 47050 10 line
46700 47050 46700 46450 10 line
grestore
gsave
false false false false 260.000000 [(R4) ] 90 46600 46500 180.555557 text
grestore
gsave
false false false false 260.000000 [(5.6k) ] 0 46900 46600 180.555557 text
grestore
gsave
46800 44600 46800 44450 10 line
46800 43700 46800 43850 10 line
46700 43850 46900 43850 10 line
46900 43850 46900 44450 10 line
46900 44450 46700 44450 10 line
46700 44450 46700 43850 10 line
grestore
gsave
false false false false 260.000000 [(R5) ] 90 46600 43900 180.555557 text
grestore
gsave
false false false false 260.000000 [(100) ] 0 46900 44000 180.555557 text
grestore
gsave
46800 45000 46800 45200 10 line
46800 45700 46800 45900 10 line
46500 45500 46300 45500 10 line
46700 45200 46900 45200 10 line
46900 45200 46900 45700 10 line
46900 45700 46700 45700 10 line
46700 45700 46700 45200 10 line
46500 45500 46700 45500 10 line
46700 45500 46600 45450 10 line
46700 45500 46600 45550 10 line
grestore
gsave
false false false false 260.000000 [(R6) ] 90 46500 45550 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 46900 45200 180.555557 text
grestore
gsave
46800 43300 46800 43500 10 line
46700 43300 46900 43300 10 line
46755 43250 46845 43250 10 line
46780 43210 46820 43210 10 line
grestore
gsave
46800 47840 46800 47500 10 line
46800 47940 100 0 360 10 darc
grestore
gsave
false true false false 260.000000 [(T3) ] 270 46750 48150 180.555557 text
grestore
46800 47500 46800 47200 10 line
46800 46300 46800 45900 10 line
46800 45000 46800 44600 10 line
46300 45500 46200 45500 10 line
46200 45500 46200 44900 10 line
46200 44900 46800 44900 10 line
gsave
49740 45600 49400 45600 10 line
49840 45600 100 0 360 10 darc
grestore
gsave
false false false true 260.000000 [(T4) ] 0 50050 45650 180.555557 text
grestore
gsave
false false false false 260.000000 [(To PIC16F887 pin RA4) ] 0 49300 45200 180.555557 text
grestore
gsave
false false false false 260.000000 [(To positive supply) ] 0 43400 47600 180.555557 text
grestore
gsave
false false false false 260.000000 [(To negative supply) ] 0 47000 47400 180.555557 text
grestore
gsave
48300 45200 48300 46000 10 line
48400 45250 48400 45350 10 line
48350 45300 48450 45300 10 line
48350 45900 48450 45900 10 line
48100 45300 48300 45300 10 line
gsave
false true false true 208.000000 [(1) ] 0 48250 45250 144.444443 text
grestore
48100 45900 48300 45900 10 line
gsave
false true false true 208.000000 [(2) ] 0 48250 45850 144.444443 text
grestore
49000 45600 49200 45600 10 line
gsave
false false false true 208.000000 [(5) ] 0 49050 45550 144.444443 text
grestore
48600 45300 48600 45100 10 line
gsave
false false false true 208.000000 [(3) ] 0 48650 45250 144.444443 text
grestore
48600 45900 48600 46100 10 line
gsave
false false false true 208.000000 [(4) ] 0 48650 46000 144.444443 text
grestore
48300 45200 48300 45100 10 line
48300 46000 48300 46100 10 line
48300 46100 49000 45600 10 line
49000 45600 48300 45100 10 line
grestore
gsave
false false false true 260.000000 [(U1) ] 0 48900 45300 180.555557 text
grestore
gsave
47900 44700 47900 44900 10 line
47800 44700 48000 44700 10 line
47855 44650 47945 44650 10 line
47880 44610 47920 44610 10 line
grestore
49200 45600 49400 45600 10 line
47900 44900 47900 45300 10 line
47900 45300 48100 45300 10 line
gsave
47900 45900 47750 45900 10 line
47000 45900 47150 45900 10 line
47150 45800 47750 45800 10 line
47750 45800 47750 46000 10 line
47750 46000 47150 46000 10 line
47150 46000 47150 45800 10 line
grestore
gsave
false false false false 260.000000 [(R7) ] 0 47200 46100 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 0 47400 45600 180.555557 text
grestore
gsave
49100 46900 48950 46900 10 line
48200 46900 48350 46900 10 line
48350 46800 48950 46800 10 line
48950 46800 48950 47000 10 line
48950 47000 48350 47000 10 line
48350 47000 48350 46800 10 line
grestore
gsave
false false false false 260.000000 [(R8) ] 0 48400 47100 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 0 48500 46600 180.555557 text
grestore
47000 45900 46800 45900 10 line
47900 45900 48100 45900 10 line
48200 46900 48000 46900 10 line
48000 46900 48000 45900 10 line
49100 46900 49400 46900 10 line
49400 46900 49400 45600 10 line
43200 43700 43200 43500 10 line
46800 43500 46800 43700 10 line
newpath
43200 46000
25
0 360 arc
fill
newpath
43200 44900
25
0 360 arc
fill
newpath
43200 44900
25
0 360 arc
fill
newpath
43200 44900
25
0 360 arc
fill
newpath
43200 46000
25
0 360 arc
fill
newpath
43200 46000
25
0 360 arc
fill
newpath
46800 45900
25
0 360 arc
fill
newpath
46800 44900
25
0 360 arc
fill
newpath
46800 44900
25
0 360 arc
fill
newpath
46800 44900
25
0 360 arc
fill
newpath
49400 45600
25
0 360 arc
fill
newpath
46800 45900
25
0 360 arc
fill
newpath
48000 45900
25
0 360 arc
fill
newpath
48000 45900
25
0 360 arc
fill
newpath
48000 45900
25
0 360 arc
fill
newpath
49400 45600
25
0 360 arc
fill
showpage
%%End
